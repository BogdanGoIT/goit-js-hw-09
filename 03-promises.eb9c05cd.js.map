{"version":3,"sources":["js/03-promises.js"],"names":["refs","form","document","querySelector","step","delay","amount","position","createPromise","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","Number","value","console","log","intervalId","setInterval","clearInterval","then","catch"],"mappings":";AAAA,MAAMA,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,KAAMF,SAASC,cAAc,oBAC7BE,MAAOH,SAASC,cAAc,qBAC9BG,OAAQJ,SAASC,cAAc,uBAKjC,IAAII,EAAW,EAuCf,SAASC,EAAcD,EAAUF,GACzBI,MAAAA,EAAgBC,KAAKC,SAAW,GAE/B,OAAA,IAAIC,QAAQ,CAACC,EAASC,KACzBC,WAAW,KACHN,EAEFI,EAAQ,CAAEN,SAAAA,EAAUF,MAAAA,IAGpBS,EAAO,CAAEP,SAAAA,EAAUF,MAAAA,KAEpBA,KAjDXL,EAAKC,KAAKe,iBAAiB,SAAWC,IACpCA,EAAEC,iBAEEd,IAAAA,EAAOe,OAAOnB,EAAKI,KAAKgB,OACxBf,EAAQc,OAAOnB,EAAKK,MAAMe,OACxBd,MAAAA,EAASa,OAAOnB,EAAKM,OAAOc,OAElCC,QAAQC,IAAIhB,GAENiB,MAAAA,EAAaC,YAAY,KAEzBjB,GAAAA,IAAaD,EAKf,OAJEe,QAAQC,IAAI,6BACdG,cAAcF,GACdhB,EAAW,OACXF,EAAQ,GAOVG,EAFAD,GAAY,EAEYF,GACrBqB,KAAK,EAAGnB,SAAAA,EAAUF,MAAAA,MACnBgB,QAAQC,2BAA2Bf,QAAeF,SAEjDsB,MAAM,EAAGpB,SAAAA,EAAUF,MAAAA,MACpBgB,QAAQC,0BAA0Bf,QAAeF,SAI/CA,GAASD,GAEZC","file":"03-promises.eb9c05cd.js","sourceRoot":"../src","sourcesContent":["const refs = {\n  form: document.querySelector('.form'),\n  step: document.querySelector('input[name=step]'),\n  delay: document.querySelector('input[name=delay]'),\n  amount: document.querySelector('input[name=amount]'),\n}\n\n\n\nlet position = 0;\n\nrefs.form.addEventListener('submit', (e) => { \n  e.preventDefault();\n  \n  let step = Number(refs.step.value);\n  let delay = Number(refs.delay.value);\n  const amount = Number(refs.amount.value);\n\n  console.log(amount);\n\n  const intervalId = setInterval(() => {\n    \n    if (position === amount) {\n        console.log('нужно остановить интервал');\n      clearInterval(intervalId);\n      position = 0;\n      delay = 0;\n      return;\n      \n    } \n\n    position += 1;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n      console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n      .catch(({ position, delay }) => {\n      console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n\n        \n        delay += step;\n    \n  }, delay)\n  \n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n      setTimeout(() => {\n          if (shouldResolve) {\n          // Fulfill\n            resolve({ position, delay });\n          } else {\n          // Reject\n            reject({ position, delay });\n          }\n        }, delay)\n      })\n}"]}