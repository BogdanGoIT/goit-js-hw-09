{"version":3,"sources":["js/03-promises.js"],"names":["refs","form","document","querySelector","step","delay","amount","promptCounter","createPromise","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","Number","value","console","log","intervalId","setInterval","clearInterval","then","catch"],"mappings":";AAAA,MAAMA,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,KAAMF,SAASC,cAAc,oBAC7BE,MAAOH,SAASC,cAAc,qBAC9BG,OAAQJ,SAASC,cAAc,uBAKjC,IAAII,EAAgB,EAkCpB,SAASC,EAAcC,EAAUJ,GACzBK,MAAAA,EAAgBC,KAAKC,SAAW,GAE/B,OAAA,IAAIC,QAAQ,CAACC,EAASC,KACzBC,WAAW,KACHN,EAEFI,EAAQ,CAAEL,SAAAA,EAAUJ,MAAAA,IAGpBU,EAAO,CAAEN,SAAAA,EAAUJ,MAAAA,KAEpBA,KA5CXL,EAAKC,KAAKgB,iBAAiB,SAAWC,IACpCA,EAAEC,iBAEEf,IAAAA,EAAOgB,OAAOpB,EAAKI,KAAKiB,OACxBhB,EAAQe,OAAOpB,EAAKK,MAAMgB,OACxBZ,MAAAA,EAAWW,OAAOpB,EAAKM,OAAOe,OAEpCC,QAAQC,IAAId,GAENe,MAAAA,EAAaC,YAAY,KAEzBlB,GAAAA,IAAkBE,EAGlB,OAFAa,QAAQC,IAAI,kCACZG,cAAcF,GAIlBhB,EAAcC,EAAUJ,GACrBsB,KAAK,EAAGlB,SAAAA,EAAUJ,MAAAA,MACnBiB,QAAQC,2BAA2Bd,QAAeJ,SAEjDuB,MAAM,EAAGnB,SAAAA,EAAUJ,MAAAA,MACpBiB,QAAQC,0BAA0Bd,QAAeJ,SAG/CE,GAAiB,EACjBF,GAASD,GAEZC","file":"03-promises.d3420867.js","sourceRoot":"../src","sourcesContent":["const refs = {\n  form: document.querySelector('.form'),\n  step: document.querySelector('input[name=step]'),\n  delay: document.querySelector('input[name=delay]'),\n  amount: document.querySelector('input[name=amount]'),\n}\n\n\n\nlet promptCounter = 0;\n\nrefs.form.addEventListener('submit', (e) => { \n  e.preventDefault();\n  \n  let step = Number(refs.step.value);\n  let delay = Number(refs.delay.value);\n  const position = Number(refs.amount.value);\n\n  console.log(position);\n\n  const intervalId = setInterval(() => {\n    \n    if (promptCounter === position) {\n        console.log('нужно остановить интервал');\n        clearInterval(intervalId);\n        return;\n    } \n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n      console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n      .catch(({ position, delay }) => {\n      console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n\n        promptCounter += 1;\n        delay += step;\n    \n  }, delay)\n  \n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n      setTimeout(() => {\n          if (shouldResolve) {\n          // Fulfill\n            resolve({ position, delay });\n          } else {\n          // Reject\n            reject({ position, delay });\n          }\n        }, delay)\n      })\n}"]}